name: Rust Profiling

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  profile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

       - uses: dtolnay/rust-toolchain@stable
       - uses: Swatinem/rust-cache@v2

       - name: Install Nix
         uses: cachix/install-nix-action@v31
         with:
           nix_path: nixpkgs=channel:nixos-unstable

      - id: head_timing_metrics
        run: |
          # Extract timing metrics from head branch
          {
            echo 'metrics<<EOF'
            cargo run --features='hotpath,hotpath-ci' -- search "nix" | grep '^{"hotpath_profiling_mode"'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - id: head_alloc_metrics
        run: |
          # Extract alloc metrics from head branch
          {
            echo 'metrics<<EOF'
            cargo run --features='hotpath,hotpath-ci,hotpath-alloc-count-total' -- search "nix" | grep '^{"hotpath_profiling_mode"'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Checkout base
        run: |
          git checkout ${{ github.event.pull_request.base.sha }}

      - id: base_timing_metrics
        run: |
          # Extract timing metrics from base branch
          {
            echo 'metrics<<EOF'
            cargo run --features='hotpath,hotpath-ci' -- search "nix" | grep '^{"hotpath_profiling_mode"'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - id: base_alloc_metrics
        run: |
          # Extract alloc metrics from base branch
          {
            echo 'metrics<<EOF'
            cargo run --features='hotpath,hotpath-ci,hotpath-alloc-count-total' -- search "nix" | grep '^{"hotpath_profiling_mode"'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Save metrics to artifact
        run: |
          mkdir -p /tmp/metrics
          echo '${{ steps.head_timing_metrics.outputs.metrics }}' > /tmp/metrics/head_timing.json
          echo '${{ steps.base_timing_metrics.outputs.metrics }}' > /tmp/metrics/base_timing.json
          echo '${{ steps.head_alloc_metrics.outputs.metrics }}' > /tmp/metrics/head_alloc.json
          echo '${{ steps.base_alloc_metrics.outputs.metrics }}' > /tmp/metrics/base_alloc.json
          echo '${{ github.event.pull_request.number }}' > /tmp/metrics/pr_number.txt

      - uses: actions/upload-artifact@v4
        with:
          name: profile-metrics
          path: /tmp/metrics/
          retention-days: 1

  comment:
    runs-on: ubuntu-latest
    needs: profile
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: profile-metrics
          path: /tmp/metrics/

      - name: Generate comment
        id: comment
        run: |
          PR_NUMBER=$(cat /tmp/metrics/pr_number.txt)
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Parse timing metrics
          HEAD_TIMING_MAP=$(jq -s 'map({key: .function, value: .time_ns}) | from_entries' /tmp/metrics/head_timing.json)
          BASE_TIMING_MAP=$(jq -s 'map({key: .function, value: .time_ns}) | from_entries' /tmp/metrics/base_timing.json)

          # Parse alloc metrics
          HEAD_ALLOC_MAP=$(jq -s 'map({key: .function, value: .alloc_count}) | from_entries' /tmp/metrics/head_alloc.json)
          BASE_ALLOC_MAP=$(jq -s 'map({key: .function, value: .alloc_count}) | from_entries' /tmp/metrics/base_alloc.json)

          # Generate comparison table
          TIMING_COMPARISON=$(jq -n --argjson head "$HEAD_TIMING_MAP" --argjson base "$BASE_TIMING_MAP" '
            ($head | keys) as $funcs |
            $funcs | map({
              function: .,
              head: ($head[.] // 0),
              base: ($base[.] // 0),
              diff: (($head[.] // 0) - ($base[.] // 0)),
              pct: if ($base[.] // 0) != 0 then ((($head[.] // 0) - ($base[.] // 0)) / ($base[.] // 0) * 100) else 0 end
            }) | sort_by(.pct | -.)
          ')

          ALLOC_COMPARISON=$(jq -n --argjson head "$HEAD_ALLOC_MAP" --argjson base "$BASE_ALLOC_MAP" '
            ($head | keys) as $funcs |
            $funcs | map({
              function: .,
              head: ($head[.] // 0),
              base: ($base[.] // 0),
              diff: (($head[.] // 0) - ($base[.] // 0)),
              pct: if ($base[.] // 0) != 0 then ((($head[.] // 0) - ($base[.] // 0)) / ($base[.] // 0) * 100) else 0 end
            }) | sort_by(.pct | -.)
          ')

          # Format as markdown table
          TIMING_TABLE=$(echo "$TIMING_COMPARISON" | jq -r '
            ["Function", "Head (ns)", "Base (ns)", "Diff (ns)", "Change %"] as $header |
            [$header] + map([.function, (.head | tostring), (.base | tostring), (.diff | tostring), (.pct | tostring + "%")]) |
            map("| " + join(" | ") + " |") | join("\n")
          ')

          ALLOC_TABLE=$(echo "$ALLOC_COMPARISON" | jq -r '
            ["Function", "Head (count)", "Base (count)", "Diff (count)", "Change %"] as $header |
            [$header] + map([.function, (.head | tostring), (.base | tostring), (.diff | tostring), (.pct | tostring + "%")]) |
            map("| " + join(" | ") + " |") | join("\n")
          ')

          COMMENT="## Hotpath Profiling Results

          ### Timing Metrics
          $TIMING_TABLE

          ### Allocation Metrics
          $ALLOC_TABLE

          *Sorted by percentage change (descending). Positive values indicate performance regression.*"

          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post comment
        run: |
          gh pr comment ${{ steps.comment.outputs.pr_number }} --body "${{ steps.comment.outputs.comment }}"
